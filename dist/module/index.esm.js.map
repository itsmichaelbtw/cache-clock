{"version":3,"file":"index.esm.js","sources":["../../lib/utils.ts","../../lib/environment.ts","../../lib/debug.ts","../../lib/hash.ts","../../lib/cache-clock.ts"],"sourcesContent":["export function isUndefined(value: unknown): value is undefined {\r\n    return typeof value === \"undefined\";\r\n}\r\n\r\nexport function isPureObject(value: unknown): value is Record<string, unknown> {\r\n    return typeof value === \"object\" && value !== null && !Array.isArray(value);\r\n}\r\n\r\nexport function isNumber(value: unknown): value is number {\r\n    return typeof value === \"number\" && !isNaN(value);\r\n}\r\n\r\nexport function isFunction(value: unknown): value is Function {\r\n    return typeof value === \"function\";\r\n}\r\n\r\nexport function isString(value: unknown): value is string {\r\n    return typeof value === \"string\";\r\n}\r\n\r\nexport function isNegative(value: number): boolean {\r\n    return value < 0;\r\n}\r\n\r\nexport function absolute(value: number): number {\r\n    return Math.abs(value);\r\n}\r\n\r\nexport function shallowMerge<T = any, U = any>(target: T, source: U): T & U {\r\n    return Object.assign({}, target, source);\r\n}\r\n\r\nexport function stringify(value: unknown): string {\r\n    if (isUndefined(value)) {\r\n        return \"\";\r\n    }\r\n\r\n    if (isString(value)) {\r\n        return value;\r\n    }\r\n\r\n    return JSON.stringify(value);\r\n}\r\n","export type EnvironmentContext = \"node\" | \"browser\" | \"unknown\";\r\n\r\nfunction getCurrentEnvironment(): EnvironmentContext {\r\n    if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.document !== \"undefined\"\r\n    ) {\r\n        return \"browser\";\r\n    }\r\n\r\n    if (\r\n        typeof process !== \"undefined\" &&\r\n        process.versions &&\r\n        process.versions.node\r\n    ) {\r\n        return \"node\";\r\n    }\r\n\r\n    return \"unknown\";\r\n}\r\n\r\nexport const environment = getCurrentEnvironment();\r\n","const colors = {\r\n    red: \"\\x1b[31m\",\r\n    yellow: \"\\x1b[33m\",\r\n    green: \"\\x1b[32m\",\r\n    lightblue: \"\\x1b[36m\"\r\n};\r\n\r\nconst globals = {\r\n    reset: \"\\x1b[0m\",\r\n    bright: \"\\x1b[1m\"\r\n};\r\n\r\nexport type DebugColors = keyof typeof colors;\r\n\r\nexport function debug(message: string, color: DebugColors) {\r\n    if (debug.DEBUG) {\r\n        const prefix = \"[CACHE-CLOCK] \";\r\n        const colorizedMessage = `${colors[color]}${prefix}${message}${globals.reset}`;\r\n\r\n        console.log(colorizedMessage);\r\n    }\r\n}\r\n\r\ndebug.DEBUG = false;\r\n","export function hash(input: string): string {\r\n    if (typeof input !== \"string\") {\r\n        input = JSON.stringify(input);\r\n    }\r\n\r\n    const numberHash = input.split(\"\").reduce((a, b) => {\r\n        a = (a << 5) - a + a * 24 + b.charCodeAt(0);\r\n        a |= 0;\r\n        return a;\r\n    }, 0);\r\n\r\n    return numberHash.toString(32);\r\n}\r\n","import {\r\n    isUndefined,\r\n    isPureObject,\r\n    isNumber,\r\n    isNegative,\r\n    absolute,\r\n    shallowMerge,\r\n    stringify,\r\n    isFunction\r\n} from \"../lib/utils\";\r\n\r\nimport { environment } from \"./environment\";\r\nimport { debug } from \"./debug\";\r\nimport { hash } from \"./hash\";\r\n\r\nconst timeProvider = Date;\r\n\r\ntype ClockMap = Map<string, CacheEntry>;\r\ntype CacheTTL = number;\r\n\r\ntype Timeout = number | NodeJS.Timeout;\r\n\r\nexport interface CacheEntry {\r\n    /**\r\n     * Hashed key of the item.\r\n     */\r\n    k: string;\r\n    /**\r\n     * Value passed to be stored.\r\n     */\r\n    v: unknown;\r\n    /**\r\n     * The time to live for the item. If `Infinity`, the item will never expire.\r\n     */\r\n    t: number;\r\n    /**\r\n     * The time this item will expire.\r\n     */\r\n    e: number;\r\n}\r\n\r\nexport interface ClockOptions {\r\n    /**\r\n     * The maximum number of items to store in the cache.\r\n     *\r\n     * If you wish to disable the maximum number of items check, thought this\r\n     * s not recommended, set this value to `Infinity`.\r\n     *\r\n     * Note: Setting this value to 0 will be treated as 1.\r\n     *\r\n     * Defaults to `1000`.\r\n     */\r\n    maxItems?: number;\r\n    /**\r\n     * The default time to live for items in the cache.\r\n     *\r\n     * Defaults to `Infinity`.\r\n     *\r\n     */\r\n    ttl?: CacheTTL;\r\n    /**\r\n     * The interval in `ms` to check for expired items. It is recommended\r\n     * to keep this value above `15 seconds` for optimal performance. If you expect\r\n     * to have a large number of items in the cache, you may want to increase\r\n     * this value to reduce the number of checks.\r\n     *\r\n     * Throughout the life-cycle of a cache clock, items are automatically checked\r\n     * for expiration when accessing methods such as `set`, `get`, etc. This value is only used\r\n     * to check for expired items when the cache clock is idle.\r\n     *\r\n     * Defaults to `15 seconds`.\r\n     */\r\n    interval?: number;\r\n    /**\r\n     * Programatically determine if you wish for the clock to auto start.\r\n     *\r\n     * This only works when first initializing the clock. If you wish to\r\n     * start or stop the clock after initialization, use the `start` and `stop`\r\n     * methods.\r\n     *\r\n     * Defaults to `true`.\r\n     */\r\n    autoStart?: boolean;\r\n    /**\r\n     * When setting an item, if an entry already exists with the same key,\r\n     * choose whether to overwrite the existing entry or not.\r\n     *\r\n     * Defaults to `false`.\r\n     */\r\n    overwrite?: boolean;\r\n    /**\r\n     * When getting an item, indicate if you wish to reset the expiration\r\n     * time of the item. This includes when a duplicate item is found before\r\n     * attempting to set a new item.\r\n     *\r\n     * This will reset the expiration relative to the current time.\r\n     *\r\n     * Affected methods: `get`, `has` and `set` (when a duplicate is found).\r\n     *\r\n     * Defaults to `false`.\r\n     */\r\n    resetTimeoutOnAccess?: boolean;\r\n    /**\r\n     * Log debug messages to the console.\r\n     */\r\n    debug?: boolean;\r\n    /**\r\n     * A function to call when an item has expired. This is called exclusively\r\n     * when an item has expired and is removed from the cache via the internal clock.\r\n     */\r\n    onExpire?(entry: CacheEntry): void;\r\n}\r\n\r\nexport interface CacheStatistics {\r\n    /**\r\n     * The number of times the cache was accessed.\r\n     */\r\n    hits: number;\r\n    /**\r\n     * The number of items that were added to the cache.\r\n     */\r\n    sets: number;\r\n    /**\r\n     * The number of times the cache was accessed and\r\n     * no item was found.\r\n     */\r\n    misses: number;\r\n    /**\r\n     * The number of items that were removed from the\r\n     * cache due to `maxItems` overflowing.\r\n     */\r\n    evictions: number;\r\n    /**\r\n     * The number of items that were removed from the\r\n     * cache due to expiration.\r\n     */\r\n    expired: number;\r\n    /**\r\n     * The number of items that were deleted from the\r\n     * cache.\r\n     */\r\n    deletes: number;\r\n    /**\r\n     * The number of items that were overwritten.\r\n     */\r\n    overwrites: number;\r\n    /**\r\n     * The number of times the cache was cleared.\r\n     */\r\n    clears: number;\r\n    /**\r\n     * The number of life-cycle events that were triggered.\r\n     */\r\n    lifecycles: number;\r\n}\r\n\r\ntype CacheSetterOptions = Pick<ClockOptions, \"ttl\" | \"overwrite\">;\r\n\r\nconst DEFAULT_CLOCK_OPTIONS: ClockOptions = {\r\n    maxItems: 1000,\r\n    ttl: Infinity,\r\n    interval: 15 * 1000,\r\n    debug: false,\r\n    autoStart: true,\r\n    overwrite: false,\r\n    resetTimeoutOnAccess: false\r\n};\r\n\r\nfunction invokeTimeout(callback: Function, delay: number): Timeout {\r\n    const timeout =\r\n        environment === \"node\" ? global.setTimeout : window.setTimeout;\r\n\r\n    return timeout.call(null, callback, delay);\r\n}\r\n\r\nfunction parseCacheOptions(\r\n    options: ClockOptions = {},\r\n    defaultOptions: ClockOptions\r\n): ClockOptions {\r\n    if (!isPureObject(options)) {\r\n        debug(\r\n            \"Invalid options passed to cache clock, using defaults.\",\r\n            \"yellow\"\r\n        );\r\n        return defaultOptions;\r\n    }\r\n\r\n    const opts = shallowMerge(defaultOptions, options);\r\n\r\n    if (isNumber(opts.maxItems) && isNegative(opts.maxItems)) {\r\n        opts.maxItems = absolute(opts.maxItems);\r\n    } else if (!isNumber(opts.maxItems)) {\r\n        opts.maxItems = defaultOptions.maxItems;\r\n    }\r\n\r\n    if (isNumber(opts.ttl) && isNegative(opts.ttl)) {\r\n        opts.ttl = absolute(opts.ttl);\r\n    } else if (!isNumber(opts.maxItems)) {\r\n        opts.ttl = defaultOptions.ttl;\r\n    }\r\n\r\n    if (isNumber(opts.interval) && isNegative(opts.interval)) {\r\n        opts.interval = absolute(opts.interval);\r\n    } else if (!isNumber(opts.interval)) {\r\n        opts.interval = defaultOptions.interval;\r\n    }\r\n\r\n    if (opts.onExpire && !isFunction(opts.onExpire)) {\r\n        opts.onExpire = undefined;\r\n    }\r\n\r\n    if (opts.maxItems === 0) {\r\n        opts.maxItems = 1;\r\n    }\r\n\r\n    return opts;\r\n}\r\n\r\nfunction createEntityKey(key: string, isHashed: boolean): string {\r\n    if (isHashed) {\r\n        return key;\r\n    }\r\n\r\n    return hash(stringify(key));\r\n}\r\n\r\nconst DEFAULT_STATISTCS: CacheStatistics = {\r\n    hits: 0,\r\n    sets: 0,\r\n    misses: 0,\r\n    evictions: 0,\r\n    expired: 0,\r\n    deletes: 0,\r\n    overwrites: 0,\r\n    clears: 0,\r\n    lifecycles: 0\r\n};\r\n\r\nexport class CacheClock {\r\n    private readonly $birth: number;\r\n    private readonly $cache: ClockMap;\r\n\r\n    private $clock: Timeout;\r\n    private $options: ClockOptions;\r\n    private $statistics: CacheStatistics;\r\n\r\n    /**\r\n     * Create a new instance of the cache clock. You can\r\n     * pass a configuration object to set the default\r\n     * options for all cacheable items.\r\n     *\r\n     * ```js\r\n     * const clock = new CacheClock({ ttl: 5 * 60 * 1000 });\r\n     * ```\r\n     */\r\n    constructor(options?: ClockOptions) {\r\n        this.$birth = timeProvider.now();\r\n        this.$cache = new Map();\r\n\r\n        this.configure(options);\r\n\r\n        this.$statistics = Object.assign({}, DEFAULT_STATISTCS);\r\n\r\n        if (this.options.autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    private prune(): void {\r\n        this.stop();\r\n\r\n        const now = timeProvider.now();\r\n\r\n        for (const value of this) {\r\n            if (value.e <= now) {\r\n                const entry = this.del(value.k, true);\r\n\r\n                if (this.options.onExpire && entry) {\r\n                    this.options.onExpire(entry);\r\n                }\r\n\r\n                this.$statistics.expired++;\r\n            }\r\n        }\r\n\r\n        this.start();\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of the cache clock. You can\r\n     * pass a configuration object to set the default\r\n     * options for all cacheable items.\r\n     *\r\n     * ```js\r\n     * const clock = new CacheClock({ ttl: 5 * 60 * 1000 });\r\n     * ```\r\n     */\r\n    static create(options: ClockOptions = {}): CacheClock {\r\n        return new CacheClock(options);\r\n    }\r\n\r\n    /**\r\n     * The age of the cache clock in `ms`.\r\n     */\r\n    public get age(): number {\r\n        return timeProvider.now() - this.$birth;\r\n    }\r\n\r\n    /**\r\n     * The number of items in the cache.\r\n     */\r\n    public get size(): number {\r\n        return this.$cache.size;\r\n    }\r\n\r\n    /**\r\n     * Global configuration that applies to all cacheable items.\r\n     */\r\n    public get options(): ClockOptions {\r\n        return this.$options;\r\n    }\r\n\r\n    public get stats(): CacheStatistics {\r\n        return this.$statistics;\r\n    }\r\n\r\n    /**\r\n     * Whether the clock is currently running.\r\n     */\r\n    public get isRunning(): boolean {\r\n        return !!this.$clock;\r\n    }\r\n\r\n    /**\r\n     * Configure the cache clock. Use this method to change the global configuration\r\n     * that applies to all cacheable items.\r\n     *\r\n     * Items that have been cached prior to updating the configuration will not be\r\n     * affected.\r\n     *\r\n     * ```js\r\n     * const clock = new CacheClock();\r\n     * clock.configure({ ttl: 5 * 60 * 1000 });\r\n     * ```\r\n     */\r\n    public configure(options: ClockOptions = {}): void {\r\n        this.$options = parseCacheOptions(\r\n            options,\r\n            this.options || DEFAULT_CLOCK_OPTIONS\r\n        );\r\n\r\n        debug.DEBUG = this.options.debug;\r\n\r\n        if (this.options.interval < DEFAULT_CLOCK_OPTIONS.interval) {\r\n            debug(\r\n                \"A cache clock interval less than 15 seconds is not recommended.\",\r\n                \"yellow\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a cache key based on the input.\r\n     */\r\n    public getCacheKey(input: string): string {\r\n        return createEntityKey(input, false);\r\n    }\r\n\r\n    /**\r\n     * Start the cache clock. This is automatically called when the cache clock is created.\r\n     * You should only need to call this method if you have stopped the cache clock manually.\r\n     *\r\n     * This will spawn a new clock with the full timeout interval. This does not resume the\r\n     * clock from where it left off.\r\n     */\r\n    public start(): void {\r\n        if (this.options.interval === Infinity || this.options.interval === 0) {\r\n            debug(\r\n                \"Disabling the clock due to an unsupported interval.\",\r\n                \"yellow\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (this.$clock) {\r\n            debug(\"Cache clock is already running. Unable to start.\", \"red\");\r\n            return;\r\n        }\r\n\r\n        this.$clock = invokeTimeout(\r\n            this.prune.bind(this),\r\n            this.options.interval\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Manually stop the cache clock. This will disable the automatic expiration of items. This does\r\n     * not prevent items from being checked for expiration.\r\n     */\r\n    public stop(): void {\r\n        if (!this.$clock) {\r\n            debug(\"Cache clock is not running. Unable to stop.\", \"red\");\r\n            return;\r\n        }\r\n\r\n        clearTimeout(this.$clock);\r\n        this.$clock = null;\r\n\r\n        this.$statistics.lifecycles++;\r\n    }\r\n\r\n    /**\r\n     * Add an item to the cache. Optionally, you can specify a time to live for the item.\r\n     *\r\n     * If the cache is full, the oldest item will be removed.\r\n     */\r\n    public set(\r\n        key: string,\r\n        value: unknown,\r\n        options?: CacheSetterOptions\r\n    ): CacheEntry {\r\n        const hashedKey = createEntityKey(key, false);\r\n\r\n        const { ttl, overwrite } = parseCacheOptions(options, this.options);\r\n\r\n        const clockItem: CacheEntry = {\r\n            k: hashedKey,\r\n            v: value,\r\n            t: ttl,\r\n            e: timeProvider.now() + ttl\r\n        };\r\n\r\n        const existingEntry = this.get(hashedKey, true);\r\n\r\n        if (existingEntry) {\r\n            if (overwrite) {\r\n                debug(\r\n                    `Overwriting existing cache entry for key \"${hashedKey}\".`,\r\n                    \"yellow\"\r\n                );\r\n                this.del(hashedKey, true);\r\n                this.$statistics.overwrites++;\r\n            } else {\r\n                debug(\r\n                    `Unable to set cache item \"${hashedKey}\". The item already exists.`,\r\n                    \"red\"\r\n                );\r\n                return existingEntry;\r\n            }\r\n        }\r\n\r\n        if (this.size >= this.options.maxItems) {\r\n            debug(\"The cache is full, removing oldest item.\", \"yellow\");\r\n            this.del(this.$cache.keys().next().value, true);\r\n            this.$statistics.evictions++;\r\n        }\r\n\r\n        this.$cache.set(hashedKey, clockItem);\r\n        this.$statistics.sets++;\r\n        return clockItem;\r\n    }\r\n\r\n    /**\r\n     * Retrieve an item from the cache. This returns the internal\r\n     * `CacheEntry` used to store the value.\r\n     */\r\n    public get(key: string, isHashed: boolean = false): CacheEntry {\r\n        const hashedKey = createEntityKey(key, isHashed);\r\n\r\n        const item = this.$cache.get(hashedKey);\r\n\r\n        this.$statistics.hits++;\r\n\r\n        if (isUndefined(item)) {\r\n            this.$statistics.misses++;\r\n            return undefined;\r\n        }\r\n\r\n        const now = timeProvider.now();\r\n\r\n        if (item.e < now) {\r\n            debug(`Cache item ${key} has expired.`, \"red\");\r\n            this.del(hashedKey, true);\r\n            this.$statistics.expired++;\r\n            return undefined;\r\n        }\r\n\r\n        if (this.options.resetTimeoutOnAccess) {\r\n            item.e = now + item.t;\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Deletes an item from the cache. Returns the deleted item\r\n     * if it exists.\r\n     */\r\n    public del(key: string, isHashed: boolean = false): CacheEntry {\r\n        const hashedKey = createEntityKey(key, isHashed);\r\n\r\n        const item = this.$cache.get(hashedKey);\r\n\r\n        if (isUndefined(item)) {\r\n            return undefined;\r\n        }\r\n\r\n        debug(`Deleting cache item ${key}.`, \"green\");\r\n        this.$cache.delete(hashedKey);\r\n        this.$statistics.deletes++;\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean indicating whether the cache contains an item.\r\n     */\r\n    public has(key: string, isHashed: boolean = false): boolean {\r\n        const hashedKey = createEntityKey(key, isHashed);\r\n        const entry = this.get(hashedKey, true);\r\n\r\n        return !isUndefined(entry);\r\n    }\r\n\r\n    /**\r\n     * Wipe the cache clean.\r\n     */\r\n    public clear(): void {\r\n        this.$cache.clear();\r\n        this.$statistics.clears++;\r\n    }\r\n\r\n    /**\r\n     * Reset the cache statistics.\r\n     */\r\n    public resetStats(): void {\r\n        this.$statistics = Object.assign({}, DEFAULT_STATISTCS);\r\n    }\r\n\r\n    /**\r\n     * Returns a JSON representation of the cache.\r\n     */\r\n    public toJSON(): CacheEntry[] {\r\n        return Array.from(this.$cache.values());\r\n    }\r\n\r\n    public [Symbol.iterator](): IterableIterator<CacheEntry> {\r\n        return this.$cache.values();\r\n    }\r\n}\r\n"],"names":["isUndefined","value","isPureObject","Array","isArray","isNumber","isNaN","isFunction","isString","isNegative","absolute","Math","abs","shallowMerge","target","source","Object","assign","stringify","JSON","getCurrentEnvironment","window","document","process","versions","node","environment","colors","red","yellow","green","lightblue","globals","reset","bright","debug","message","color","DEBUG","prefix","colorizedMessage","console","log","hash","input","numberHash","split","reduce","a","b","charCodeAt","toString","timeProvider","Date","DEFAULT_CLOCK_OPTIONS","maxItems","ttl","Infinity","interval","autoStart","overwrite","resetTimeoutOnAccess","invokeTimeout","callback","delay","timeout","global","setTimeout","call","parseCacheOptions","options","defaultOptions","opts","onExpire","undefined","createEntityKey","key","isHashed","DEFAULT_STATISTCS","hits","sets","misses","evictions","expired","deletes","overwrites","clears","lifecycles","Symbol","iterator","CacheClock","$birth","now","$cache","Map","configure","$statistics","start","stop","e","entry","del","k","size","$options","$clock","prune","bind","clearTimeout","hashedKey","clockItem","v","t","existingEntry","get","keys","next","set","item","clear","from","values"],"mappings":"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"}